% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cvGamlrFormula.r
\name{cv.gamlr}
\alias{coef.cv.gamlr.formula}
\alias{cv.gamlr}
\alias{cv.gamlr.default}
\alias{cv.gamlr.formula}
\alias{predict.cv.gamlr.formula}
\title{Formula interface for elastic net cross-validation with cv.gamlr}
\usage{
cv.gamlr(x, ...)

\method{cv.gamlr}{default}(x, ...)

\method{cv.gamlr}{formula}(formula, data, ..., weights, offset = NULL,
  subset = NULL, na.action = getOption("na.action"),
  drop.unused.levels = FALSE, xlev = NULL, sparse = FALSE)

\method{predict}{cv.gamlr.formula}(object, newdata, na.action = na.pass, ...)

\method{coef}{cv.gamlr.formula}(object, ...)
}
\arguments{
\item{x}{For the default method, a matrix of predictor variables.}

\item{...}{For \code{cv.gamlr.formula} and \code{cv.gamlr.default}, other arguments to be passed to \code{\link[gamlr:cv.gamlr]{gamlr::cv.gamlr}}; for the \code{predict} and \code{coef} methods, arguments to be passed to their counterparts in package \code{gamlr}.}

\item{formula}{A model formula; interaction terms are allowed and will be expanded per the usual rules for linear models.}

\item{data}{A data frame or matrix containing the variables in the formula.}

\item{weights}{An optional vector of case weights to be used in the fitting process. If missing, defaults to an unweighted fit.}

\item{offset}{An optional vector of offsets, an \emph{a priori} known component to be included in the linear predictor.}

\item{subset}{An optional vector specifying the subset of observations to be used to fit the model.}

\item{na.action}{A function which indicates what should happen when the data contains missing values. For the \code{predict} method, \code{na.action = na.pass} will predict missing values with \code{NA}; \code{na.omit} or \code{na.exclude} will drop them.}

\item{drop.unused.levels}{Should factors have unused levels dropped? Defaults to \code{FALSE}.}

\item{xlev}{A named list of character vectors giving the full set of levels to be assumed for each factor.}

\item{sparse}{Should the model matrix be in sparse format? This can save memory when dealing with many factor variables, each with many levels (but see the warning below).}

\item{object}{For the \code{predict} and \code{coef} methods, an object of class \code{cv.gamlr.formula}.}

\item{newdata}{For the \code{predict} method, a data frame containing the observations for which to calculate predictions.}
}
\value{
For \code{cv.gamlr.formula}, an object of class \code{cv.gamlr.formula}. This is basically the same object created by \code{gamlr::cv.gamlr}, but with extra components to allow formula usage.
}
\description{
Formula interface for elastic net cross-validation with cv.gamlr
}
\details{
The \code{cv.gamlr} function in this package is an S3 generic with a formula and a default method. The former calls the latter, and the latter is simply a direct call to the \code{cv.gamlr} function in package \code{gamlr}. All the arguments to \code{gamlr::cv.gamlr} are (or should be) supported.

The code works in a similar manner to \code{lm}, \code{glm} and other modelling functions. The arguments are used to generate a \emph{model frame}, which is a data frame augmented with information about the roles the columns play in fitting the model. This is then turned into a \emph{model matrix} and a response vector, which are passed to \code{gamlr::gamlr} along with any arguments in \code{...}. If \code{sparse} is TRUE, then \code{Matrix::sparse.model.matrix} is used instead of \code{stats::model.matrix} to create the model matrix.

The \code{predict} and \code{coef} methods are wrappers for the corresponding methods in the \code{gamlr} package. The former constructs a predictor model matrix from its \code{newdata} argument and passes that as the \code{newx} argument to \code{gamlr:::predict.cv.gamlr}.
}
\section{Warning}{

Fundamental to R's handling of formulas, model frames and model matrices is a \code{\link{terms}} object, which encodes how variables and their interactions (if any) are organised. One of the attributes of this object is a matrix with one row per variable, and one column per main effect and interaction. Thus, at minimum, this is (approximately) a \eqn{p \times p}{p x p} square matrix where \eqn{p} is the number of main effects in the model. When \eqn{p ~ 16000}, this matrix will be about a gigabyte in size. Because of this, you should use the formula interface with caution when working with wide datasets and limited memory.
}
\examples{
cv.gamlr(mpg ~ ., data=mtcars)

\dontrun{

# Leukemia example dataset from Trevor Hastie's website
download.file("http://web.stanford.edu/~hastie/gamlr/gamlrData/Leukemia.RData",
              "Leukemia.RData")
load("Leukemia.Rdata")
leuk <- do.call(data.frame, Leukemia)
cv.gamlr(y ~ ., leuk, family="binomial")
}
}
\seealso{
\code{\link[gamlr:cv.gamlr]{gamlr::cv.gamlr}}, \code{\link[gamlr:predict.cv.gamlr]{gamlr:::predict.cv.gamlr}}, \code{\link[gamlr:coef.cv.gamlr]{gamlr:::coef.cv.gamlr}}, \code{\link{model.frame}}, \code{\link{model.matrix}}
}

